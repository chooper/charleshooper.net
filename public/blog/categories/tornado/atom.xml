<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tornado | Charles Hooper]]></title>
  <link href="http://www.charleshooper.net/blog/categories/tornado/atom.xml" rel="self"/>
  <link href="http://www.charleshooper.net/"/>
  <updated>2015-09-05T13:43:18+00:00</updated>
  <id>http://www.charleshooper.net/</id>
  <author>
    <name><![CDATA[Charles Hooper]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python: Starting Tornado Apps at Boot Using Upstart]]></title>
    <link href="http://www.charleshooper.net/blog/python-starting-tornado-apps-at-boot-using-upstart/"/>
    <updated>2010-05-08T00:00:00+00:00</updated>
    <id>http://www.charleshooper.net/blog/python-starting-tornado-apps-at-boot-using-upstart</id>
    <content type="html"><![CDATA[<h1 id="section"></h1>

<p>Today, I’m going to show you how to start up your <a href="http://www.tornadoweb.org/">Tornado</a> apps at
boot using <a href="http://upstart.ubuntu.com/">upstart</a>. For path names, I’m assuming some modern
version of Ubuntu, such as 9.10 or higher. I’m also assuming that you
have some project with an executable Python script that fires up the
Tornado app. I usually have one file in all of my projects called
<code>web.py</code>.</p>

<p>The important part of this file looks like this (mind the application and port variables):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Snippet in web.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">“</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">”</span><span class="p">:</span>
</span><span class='line'>	<span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
</span><span class='line'>	<span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>	<span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Got that in place? Good.  Next, <strong>make a system user</strong> for your project to run
as. In my example, I’ll be using <code>projectuser</code> as the username. Creating this
user can be done like so:</p>

<p><code>
sudo useradd --system --user-group projectuser
</code></p>

<p>Finally, create the file <code>/etc/init/web.conf</code>. It’s
<em>very</em> important that this filename ends in <strong>.conf</strong>. The contents of this
file should be as follows:</p>

<p>```
# torando project
start on runlevel 2
stop on runlevel [!2]
respawn</p>

<p>setuid projectuser
setgid projectuser</p>

<p>exec /path/to/project/web.py
```</p>

<p>That’s it! You can start your Tornado app by entering the command:
<code>sudo start web</code>. If successful, you should see output similar to:
` ** web start/running, process 28058<code>. You can also stop your projects using
the command </code>sudo stop web`.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropping Privileges in Python for Tornado Apps]]></title>
    <link href="http://www.charleshooper.net/blog/dropping-privileges-in-python-for-tornado-apps/"/>
    <updated>2010-05-08T00:00:00+00:00</updated>
    <id>http://www.charleshooper.net/blog/dropping-privileges-in-python-for-tornado-apps</id>
    <content type="html"><![CDATA[<h1 id="section"></h1>

<p>Today, I’m going to show you how to drop from the root user to an unprivileged user in Python for the purpose of running a <a href="http://www.tornadoweb.org/">Tornado</a> app.</p>

<p>First <strong>make a system user</strong> for your project to run as. In my example,
I’ll be using <code>projectuser</code> as the username. Creating this user can be done like so: </p>

<p><code>
sudo useradd --system --user-group projectuser
</code></p>

<p>Now, in your script that is responsible for starting your Tornado app, you likely have something that probably looks like the following: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Snippet in web.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">“</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">”</span><span class="p">:</span><span class="err"> </span>
</span><span class='line'><span class="err">   </span> <span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">application</span><span class="p">)</span><span class="err"> </span>
</span><span class='line'><span class="err">   </span> <span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">port</span><span class="p">)</span><span class="err"> </span>
</span><span class='line'><span class="err">   </span> <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What we need to do now is define a user to run as and then drop
privileges using a call to <code>setuid</code>. We can do this by replacing the above with: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Modification to web.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">“</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">”</span><span class="p">:</span>
</span><span class='line'><span class="err">   </span> <span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="err">   </span> <span class="kn">import</span> <span class="nn">pwd</span>
</span><span class='line'><span class="err">   </span> <span class="c"># define user to run as</span>
</span><span class='line'><span class="err">   </span> <span class="n">run_as_user</span> <span class="o">=</span> <span class="err">“</span><span class="n">projectuser</span><span class="err">”</span>
</span><span class='line'><span class="err">   </span> <span class="c"># drop privileges</span>
</span><span class='line'><span class="err">   </span> <span class="n">uid</span> <span class="o">=</span> <span class="n">pwd</span><span class="o">.</span><span class="n">getpwnam</span><span class="p">(</span><span class="n">run_as_user</span><span class="p">)</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://subversity.net/python-starting-tornado-apps-at-boot-using-up&quot;</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">   </span> <span class="n">os</span><span class="o">.</span><span class="n">setuid</span><span class="p">(</span><span class="n">uid</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span> <span class="c"># start tornado app</span>
</span><span class='line'><span class="err">   </span> <span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span> <span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span> <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And voila, your app should now run as the user you defined! Do note that
only the root user can call <code>setuid</code>. As a result, your script now needs
to be run using <code>sudo</code> or from an <a href="http://subversity.net/python-starting-tornado-apps-at-boot-using-up">upstart startup script</a>, for example. </p>

<p>One caveat is that you won’t be able to use port numbers below 1024
since you are dropping to an unprivileged user before binding to the
port. I think there’s a way to get around this by replacing
<code>http_server.listen()</code> with <code>http_server.bind()</code>, <code>http_server.start()</code>,
and dropping privileges between those calls, but this remains untested
for now. Alternatively, you could use the respective <em>proxy modules</em> for
<a href="http://redmine.lighttpd.net/wiki/1/Docs:ModProxy">Lighttpd</a> or <a href="http://www.tornadoweb.org/documentation#running-tornado-in-production">nginx</a> to listen on privileged ports.</p>

]]></content>
  </entry>
  
</feed>
