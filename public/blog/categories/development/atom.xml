<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | Charles Hooper]]></title>
  <link href="http://www.charleshooper.net/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://www.charleshooper.net/"/>
  <updated>2015-11-24T15:27:46-08:00</updated>
  <id>http://www.charleshooper.net/</id>
  <author>
    <name><![CDATA[Charles Hooper]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Briefly: Operator Requirements]]></title>
    <link href="http://www.charleshooper.net/blog/briefly-operator-requirements/"/>
    <updated>2015-11-23T10:49:00-08:00</updated>
    <id>http://www.charleshooper.net/blog/briefly-operator-requirements</id>
    <content type="html"><![CDATA[<h1 id="section"></h1>

<p>On any given day, there are a number of people discussing user requirements and
prioritizing the work ahead of them based on them. There’s an
oft-underrepresented group of users however and those are your operators.
Typically, the set of things needed by your operators are buried in your
project’s list of “non-functional requirements”, if at all.</p>

<p>In this brief, I would like to provide you with a de facto set of “operator
requirements” for your project. This list is likely incomplete and I’m
discovering more every day. I may update this post from time to time to add
things or clarify them as I journey towards understanding.</p>

<p>An application that satisfies these requirements will be more scalable, easier
to operate, and likely have a lower Mean Time To Recovery than an application
that does not.</p>

<ol>
  <li>
    <p>In general you should strive to adhere to <a href="http://12factor.net/">12factor</a> if you’re building a web
  application. 12factor creates a clean contract between your application and
  the operating system, enables simpler deployments, and results in applications
  that are mostly horizontally scalable by default. If you cannot adhere to
  12factor, then I would challenge you to borrow as much of it as you can before
  discounting the whole 12factor methodology.</p>
  </li>
  <li>
    <p>Your application should have plenty of <a href="http://www.charleshooper.net/blog/briefly-logs/">logging and follow best
  practices</a>.</p>
  </li>
  <li>
    <p>Your application should also emit metrics that create some sense of
  understanding of what the system is doing.</p>
  </li>
  <li>
    <p>Your application’s services should have <a href="http://www.charleshooper.net/blog/briefly-health-checks/">health checks</a>. The health checks
  should return HTTP 2xx or 3xx when the service is healthy and HTTP 5xx when
  it is not. The response body should contain an explanation or identifier that
  will allow the operator to determine why the health check failed to aid in
  incident recovery.</p>
  </li>
  <li>
    <p>Your application should use <a href="https://brandur.org/request-ids">unique request IDs</a> and add them to their
  logging contexts (see logging).</p>
  </li>
  <li>
    <p>Your application should support credential rotation. Any given secret,
  whether it’s a password, API key, SSL private key, or otherwise, should be
  changeable with minimal disruption to the service. This should be exercised
  often to ensure it works as designed.</p>
  </li>
  <li>
    <p>Your application should provide operators with <a href="http://blog.travis-ci.com/2014-03-04-use-feature-flags-to-ship-changes-with-confidence/">toggles or feature flags</a> —
  parameters that allow the operators or the system itself to turn off bits of
  functionality when the system is degraded.</p>
  </li>
  <li>
    <p>Your application should put external resources behind <a href="https://engineering.heroku.com/blogs/2015-06-30-improved-production-stability-with-circuit-breakers/">circuit breakers</a>.
  Circuit breakers allow your app to continue operating (albeit in a degraded
  state) when an external resource is unavailable instead of taking your
  application offline.</p>
  </li>
  <li>
    <p>Your application should be <a href="http://12factor.net/disposability">disposable and restartable</a>; this means that
  it’s restartable on the same instance or a new instance) after a crash and
  should crash in an automatically recoverable state. If your crash is not
  automatically recoverable, it should scream! In addition, your application
  should gracefully complete existing work such as HTTP requests or jobs it
  picked up from a task queue. In the case of long running jobs, your application
  should be able to abandon the work to have it picked up by another worker or
  node.</p>
  </li>
</ol>

<p>These are just a start but these requirements should be imported into your project’s
requirements and prioritized with maintainability in mind. By doing so, your
application will be more scalable, easier to operator, and have a lower Mean
Time To Recovery than application that don’t satisfy these requirements.</p>

<p>Do you feel like I missed anything? What else would you recommend?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Briefly: Health Checks]]></title>
    <link href="http://www.charleshooper.net/blog/briefly-health-checks/"/>
    <updated>2015-11-08T01:23:00-08:00</updated>
    <id>http://www.charleshooper.net/blog/briefly-health-checks</id>
    <content type="html"><![CDATA[<h1 id="section"></h1>

<p>Health checks are specially defined endpoints or routes in your application
that allow external monitors to determine the health of your web application.
They are so important to production health that I consider them the “13th
factor” in <a href="http://12factor.net/">12factor</a>.</p>

<p>If an application is healthy it will return a HTTP 2xx or 3xx status code and
when it is not it will return an HTTP 5xx status code.</p>

<p>This type of output allows load balancers to remove unhealthy instances from
its rotation but can also be used to alert an operator or even automatically
replace the instance.</p>

<p>In order to implement proper health checks, your application’s health checks
should:</p>

<ol>
  <li>
    <p>Return a HTTP 2xx or 3xx status code when healthy</p>
  </li>
  <li>
    <p>Return a HTTP 5xx status code when not healthy</p>
  </li>
  <li>
    <p>Include the reason why the check failed in the response body</p>
  </li>
  <li>
    <p><a href="http://www.charleshooper.net/blog/briefly-logs/">Log the requests and their results</a> along with Request IDs</p>
  </li>
  <li>
    <p>Not have any side effects</p>
  </li>
  <li>
    <p>Be lightweight and fast</p>
  </li>
</ol>

<p>If you implement health checks in your application following this advice,
you’ll have a more resilient, monitorable, and manageable application.</p>

<p>How about you all? Is there anything you would add?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Briefly: Logs]]></title>
    <link href="http://www.charleshooper.net/blog/briefly-logs/"/>
    <updated>2015-10-29T05:47:00-07:00</updated>
    <id>http://www.charleshooper.net/blog/briefly-logs</id>
    <content type="html"><![CDATA[<h1 id="section"></h1>

<p>Recently I was asked by another engineer what information I expect to be able
to find in logs. For this, I mostly agree with <a href="http://dev.splunk.com/view/logging-best-practices/SP-CAAADP6">Splunk’s best practices</a> but
I have some additional advice I want to provide. I’ll end up regurgitating some
of Splunk’s recommendations anyway.</p>

<ol>
  <li>
    <p>Your logs should be human readable. This means logging in text (no binary
logging) and in a format that can be read by angry humans. Splunk recommends
key-value pairs (e.g. <code>at=response code=200 bytes=1024</code>) since it makes
Splunking easy, but I don’t have a strong enough opinion to evangelize that.
Some folks advocate for logging in JSON but I don’t actually find JSON to be
very readable.</p>

    <p>Edit: Someone pointed out to me that this isn’t ideal when you have a large
amount of logs. They prefered sending JSON logs to a service like ElasticSearch
but I think also sending key-value pairs to Splunk is also reasonable at some
scale.</p>
  </li>
  <li>
    <p>Every log line should include a timestamp. The timestamp should be human
readable and in a standard format such as <a href="https://tools.ietf.org/html/rfc3339">RFC 3339</a>/<a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>.
Finally, even though the above specs include a timezone offset, timestamps
should be stated in UTC time whenever possible.</p>
  </li>
  <li>
    <p>Every log line should include a unique identifier for the work being
performed. In web applications and APIs, for example, this would be a
request ID. The combination of a unique ID and timestamp allows for developers
and operators to trace the execution of a single work unit.</p>
  </li>
  <li>
    <p>More is more. While I don’t particularly enjoy reading logs, I have always
been more happy when an application logs more information than I need versus
when an application doesn’t log enough information. Be verbose and log
everything.</p>
  </li>
  <li>
    <p>Make understanding the code path of a work unit easy. This means logging
file names, class names, function or method names, and so on. When sensible,
include the arguments to these things as well.</p>
  </li>
  <li>
    <p>Use one line per event. Multi-line events are bad because they are difficult
to grep or Splunk. Keep everything on one log line but feel free to log
additional events. An exception to this rule might be tracebacks (see what I
did there?)</p>
  </li>
  <li>
    <p>Log to stdout if you’re following <a href="http://12factor.net/">12factor</a> otherwise log to syslog. Do not
write your own log files! By writing your own log files, you are either
taking log rotation off the table or signing yourself up to support exciting
requirements like re-opening logs on SIGHUP (let’s not go there).</p>
  </li>
  <li>
    <p>Last but not least: <strong>Don’t write your own logging library!</strong> Chances are
there already exists a well thought-out and standard library available in
your application’s language or framework. Please use it!</p>
  </li>
</ol>

<p>So those are my recommendations about logs. What else would you recommend?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Painless instrumentation of Celery tasks using statsd and graphite]]></title>
    <link href="http://www.charleshooper.net/blog/painless-instrumentation-of-celery-tasks-using-statsd-and-graphite/"/>
    <updated>2012-03-12T00:00:00-07:00</updated>
    <id>http://www.charleshooper.net/blog/painless-instrumentation-of-celery-tasks-using-statsd-and-graphite</id>
    <content type="html"><![CDATA[<h1 id="section"></h1>

<p><img src="http://www.charleshooper.net/wp-content/uploads/400px-Steuerstand01-150x150.jpg" alt="" title="A Control Station" />
For one of my clients and side projects, we’ve been working hard to build in application-level metrics to our wide portfolio of services. Among these services is one built on top of the <a href="http://celeryproject.org/">Celery distributed task queue</a>. We wanted a system that required as little configuration as possible to publish new metrics. For this reason, we decided on using <a href="http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/">statsd</a> and <a href="http://graphite.wikidot.com/">graphite</a>. Getting statsd and graphite running was the easy part, but we needed a quick, painless way of adding the instrumentation code for the most basic metrics to our Celery-backed service.</p>

<p>For us, those basic metrics consisted of:</p>

<ul>
  <li>Number of times a worker starts on a specific task</li>
  <li>Number of times a task raises an exception</li>
  <li>Number of times a task completes successfully (no exceptions)</li>
  <li>How long each task takes to complete</li>
</ul>

<p>Since the code to enable these metrics just <em>wraps</em> the code being instrumented it seemed only natural to use a decorator. Below is the code I wrote to do just that.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>statsd_instrument.py</span><a href='https://gist.github.com/chooper/2018362'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">”</span><span class="s">&quot;”Decorator to quickly add statsd (graphite) instrumentation to Celery</span>
</span><span class='line'><span class="n">task</span> <span class="n">functions</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">With</span> <span class="n">some</span> <span class="n">slight</span> <span class="n">modification</span><span class="p">,</span> <span class="n">this</span> <span class="n">could</span> <span class="n">be</span> <span class="n">used</span> <span class="n">to</span> <span class="n">instrument</span> <span class="n">just</span>
</span><span class='line'><span class="n">about</span> <span class="nb">any</span> <span class="p">(</span><span class="n">non</span><span class="o">-</span><span class="n">celery</span><span class="p">)</span> <span class="n">function</span> <span class="ow">and</span> <span class="n">be</span> <span class="n">made</span> <span class="n">abstract</span> <span class="n">enough</span> <span class="n">to</span> <span class="n">customize</span>
</span><span class='line'><span class="n">metric</span> <span class="n">names</span><span class="p">,</span> <span class="n">etc</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Stats</span> <span class="n">reported</span> <span class="n">include</span> <span class="n">number</span> <span class="n">of</span> <span class="n">times</span> <span class="n">the</span> <span class="n">task</span> <span class="n">was</span> <span class="n">accepted</span> <span class="n">by</span> <span class="n">a</span> <span class="n">worker</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">started</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">successes</span><span class="p">,</span> <span class="ow">and</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">times</span> <span class="n">the</span> <span class="n">task</span>
</span><span class='line'><span class="n">raised</span> <span class="n">an</span> <span class="n">exception</span><span class="o">.</span> <span class="n">In</span> <span class="n">addition</span><span class="p">,</span> <span class="n">it</span> <span class="n">also</span> <span class="n">reports</span> <span class="n">how</span> <span class="nb">long</span> <span class="n">the</span> <span class="n">task</span> <span class="n">took</span>
</span><span class='line'><span class="n">to</span> <span class="n">complete</span><span class="o">.</span> <span class="n">Usage</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@task</span>
</span><span class='line'><span class="nd">@instrument_task</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mytask</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># do stuff</span>
</span><span class='line'>    <span class="k">pass</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Please</span> <span class="n">note</span> <span class="n">that</span> <span class="n">the</span> <span class="n">order</span> <span class="n">of</span> <span class="n">decorators</span> <span class="ow">is</span> <span class="n">important</span> <span class="n">to</span> <span class="n">Celery</span><span class="o">.</span> <span class="n">See</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">ask</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">celery</span><span class="o">/</span><span class="n">userguide</span><span class="o">/</span><span class="n">tasks</span><span class="o">.</span><span class="n">html</span><span class="c">#decorating-tasks</span>
</span><span class='line'><span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Uses</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">simple_decorator</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="kn">from</span>
</span><span class='line'><span class="nn">http</span><span class="p">:</span><span class="o">//</span><span class="n">wiki</span><span class="o">.</span><span class="n">python</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">moin</span><span class="o">/</span><span class="n">PythonDecoratorLibrary</span><span class="c">#Property_Definition&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Limitation</span><span class="p">:</span> <span class="n">Does</span> <span class="ow">not</span> <span class="n">readily</span> <span class="n">work</span> <span class="n">on</span> <span class="n">subclasses</span> <span class="n">of</span> <span class="n">celery</span><span class="o">.</span><span class="n">tasks</span><span class="o">.</span><span class="n">Task</span>
</span><span class='line'><span class="n">because</span> <span class="n">it</span> <span class="n">always</span> <span class="n">reports</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">task_name</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">as</span> <span class="err">‘</span><span class="n">run</span><span class="err">’</span>
</span><span class='line'><span class="err">“””</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;statsd-instrumentation&quot;</span><span class="o">&gt;</span><span class="n">statsd</span> <span class="n">instrumentation</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">current_app</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">statsd</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@simple_decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">instrument_task</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Wraps a celery task with statsd instrumentation code”””&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">instrument_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="n">stats_conn</span> <span class="o">=</span> <span class="n">statsd</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">Connection</span><span class="p">(</span>
</span><span class='line'>        <span class="n">host</span> <span class="o">=</span> <span class="n">current_app</span><span class="o">.</span><span class="n">conf</span><span class="p">[</span><span class="s">&#39;STATSD_HOST&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="n">port</span> <span class="o">=</span> <span class="n">current_app</span><span class="o">.</span><span class="n">conf</span><span class="p">[</span><span class="s">&#39;STATSD_PORT&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="n">sample_rate</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task_name</span> <span class="o">=</span> <span class="n">func</span><span class="o">.</span><span class="n">__name__</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">counter</span> <span class="o">=</span> <span class="n">statsd</span><span class="o">.</span><span class="n">counter</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="s">&#39;celery.tasks.status&#39;</span><span class="p">,</span><span class="n">stats_conn</span><span class="p">)</span>
</span><span class='line'>    <span class="n">counter</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;{task_name}.started&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">timer</span> <span class="o">=</span> <span class="n">statsd</span><span class="o">.</span><span class="n">timer</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="s">&#39;celery.tasks.duration&#39;</span><span class="p">,</span> <span class="n">stats_conn</span><span class="p">)</span>
</span><span class='line'>    <span class="n">timer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span><span class="p">:</span>
</span><span class='line'>        <span class="n">counter</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;{task_name}.exceptions&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">()))</span>
</span><span class='line'>        <span class="k">raise</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">counter</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;{task_name}.success&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">()))</span>
</span><span class='line'>        <span class="n">timer</span><span class="o">.</span><span class="n">stop</span><span class="p">(</span><span class="s">&#39;{task_name}.success&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">()))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="n">timer</span>
</span><span class='line'>            <span class="k">del</span> <span class="n">counter</span>
</span><span class='line'>            <span class="k">del</span> <span class="n">stats_conn</span>
</span><span class='line'>        <span class="k">except</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">instrument_wrapper</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">simple_decorator</span><span class="p">(</span><span class="n">decorator</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Borrowed from:</span>
</span><span class='line'>    <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">wiki</span><span class="o">.</span><span class="n">python</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">moin</span><span class="o">/</span><span class="n">PythonDecoratorLibrary</span><span class="c">#Property_Definition&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Original</span> <span class="n">docstring</span><span class="p">:</span>
</span><span class='line'><span class="n">This</span> <span class="n">decorator</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">to</span> <span class="n">turn</span> <span class="n">simple</span> <span class="n">functions</span>
</span><span class='line'><span class="n">into</span> <span class="n">well</span><span class="o">-</span><span class="n">behaved</span> <span class="n">decorators</span><span class="p">,</span> <span class="n">so</span> <span class="nb">long</span> <span class="k">as</span> <span class="n">the</span> <span class="n">decorators</span>
</span><span class='line'><span class="n">are</span> <span class="n">fairly</span> <span class="n">simple</span><span class="o">.</span> <span class="n">If</span> <span class="n">a</span> <span class="n">decorator</span> <span class="n">expects</span> <span class="n">a</span> <span class="n">function</span> <span class="ow">and</span>
</span><span class='line'><span class="n">returns</span> <span class="n">a</span> <span class="n">function</span> <span class="p">(</span><span class="n">no</span> <span class="n">descriptors</span><span class="p">),</span> <span class="ow">and</span> <span class="k">if</span> <span class="n">it</span> <span class="n">doesn</span><span class="s">&#39;t</span>
</span><span class='line'><span class="n">modify</span> <span class="n">function</span> <span class="n">attributes</span> <span class="ow">or</span> <span class="n">docstring</span><span class="p">,</span> <span class="n">then</span> <span class="n">it</span> <span class="ow">is</span>
</span><span class='line'><span class="n">eligible</span> <span class="n">to</span> <span class="n">use</span> <span class="n">this</span><span class="o">.</span> <span class="n">Simply</span> <span class="nb">apply</span> <span class="nd">@simple_decorator</span> <span class="n">to</span>
</span><span class='line'><span class="n">your</span> <span class="n">decorator</span> <span class="ow">and</span> <span class="n">it</span> <span class="n">will</span> <span class="n">automatically</span> <span class="n">preserve</span> <span class="n">the</span>
</span><span class='line'><span class="n">docstring</span> <span class="ow">and</span> <span class="n">function</span> <span class="n">attributes</span> <span class="n">of</span> <span class="n">functions</span> <span class="n">to</span> <span class="n">which</span>
</span><span class='line'><span class="n">it</span> <span class="ow">is</span> <span class="n">applied</span><span class="o">.</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">def new_decorator(f):</span>
</span><span class='line'><span class="s">    g = decorator(f)</span>
</span><span class='line'><span class="s">    g.__name__ = f.__name__</span>
</span><span class='line'><span class="s">    g.__module__ = f.__module__ # or celery throws a fit</span>
</span><span class='line'><span class="s">    g.__doc__ = f.__doc__</span>
</span><span class='line'><span class="s">    g.__dict__.update(f.__dict__)</span>
</span><span class='line'><span class="s">    return g</span>
</span><span class='line'><span class="s"># Now a few lines needed to make simple_decorator itself</span>
</span><span class='line'><span class="s"># be a well-behaved decorator.</span>
</span><span class='line'><span class="s">new_decorator.__name__ = decorator.__name__</span>
</span><span class='line'><span class="s">new_decorator.__doc__ = decorator.__doc__</span>
</span><span class='line'><span class="s">new_decorator.__dict__.update(decorator.__dict__)</span>
</span><span class='line'><span class="s">return new_decorator</span>
</span><span class='line'><span class="s">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Have the Tools but What About the Techniques?]]></title>
    <link href="http://www.charleshooper.net/blog/we-have-the-tools-but-what-about-the-techniques/"/>
    <updated>2012-01-02T00:00:00-08:00</updated>
    <id>http://www.charleshooper.net/blog/we-have-the-tools-but-what-about-the-techniques</id>
    <content type="html"><![CDATA[<h1 id="section"></h1>

<p>In my previously-written article “<a href="http://www.charleshooper.net/blog/concurrent-engineering-the-foundation-of-devops/" title="Concurrent Engineering: The Foundation of DevOps">Concurrent Engineering: The Foundation of DevOps</a>” I wrote “<em>just because you use puppet does not necessarily mean your organization is practicing DevOps.</em>” I didn’t spend much time on it then, but I think it bears repeating and further explanation. The <strong>DevOps “movement” has seen</strong>, and will likely continue to see, <strong>a huge influx of new tools</strong> as organizations attempt to find ways to adopt DevOps within their organizations. These tools have included (and certainly have not been limited to) tools that aid in monitoring (statsd), configuration management (puppet), and continuous delivery (hubot).</p>

<p>Operations engineers, software developers, and managers are in a mad dash to develop, utilize, and integrate these tools within their organizations. And that’s where we’re going wrong; we are focused on a single component of the Software/Systems Engineering Process. This process model contains three main components that are central to its existence: <em>methodologies</em>, <em>techniques</em>, and <em>tools</em> (Valacich 2009). While I don’t need to go into each one specifically, it’s clear that the tools are just a single factor in the overall process. Following the model further, it becomes clear that the makeup of each of these components influences the other components in the process.</p>

<p>Put simply, <strong>DevOps is a methodology</strong> and, as such, it’s natural that we’re seeing a huge response in tools. What I feel we’re missing, however, is more information about the different techniques used throughout organizations in <em>their</em> software and operations engineering processes. An excellent example of this is <a href="http://scottchacon.com/2011/08/31/github-flow.html">Scott Chacon’s explanation of how Github uses Git (and Github!) to deliver continuous improvement</a> to their service. With that said, I would like to see more organizations refine their techniques and talk about <em>these</em> as much as they talk about their tools.</p>

]]></content>
  </entry>
  
</feed>
